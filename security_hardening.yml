---
- name: "Secure Ubuntu Server - Initial Hardening"
  hosts: localhost
  connection: local
  become: true
  
  vars:
    deploy_user: "deploy"
    ssh_port: 2236
    deploy_user_password: "{{ lookup('env', 'DEPLOY_PASSWORD') }}"  # Set via environment variable
    allowed_ssh_users:
      - "{{ deploy_user }}"
    
  tasks:
    - name: Check if running Ubuntu 24.04
      assert:
        that:
          - ansible_distribution == 'Ubuntu'
          - ansible_distribution_version == "24.04"
        fail_msg: "This playbook is designed for Ubuntu 24.04 LTS"
        success_msg: "Ubuntu 24.04 detected - proceeding with security hardening"
    
    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: dist
        force_apt_get: yes
        cache_valid_time: 3600
    
    # ============================================
    # User Management
    # ============================================
    
    - name: Create deploy user
      user:
        name: "{{ deploy_user }}"
        state: present
        shell: /bin/bash
        create_home: yes
        groups: sudo
        append: yes
      when: deploy_user_password is defined and deploy_user_password != ""
    
    - name: Set password for deploy user
      user:
        name: "{{ deploy_user }}"
        password: "{{ deploy_user_password | password_hash('sha512') }}"
        update_password: always
      when: deploy_user_password is defined and deploy_user_password != ""
      no_log: true
    
    - name: Create .ssh directory for deploy user
      file:
        path: "/home/{{ deploy_user }}/.ssh"
        state: directory
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: '0700'
    
    - name: Copy authorized_keys from root to deploy user
      copy:
        src: /root/.ssh/authorized_keys
        dest: "/home/{{ deploy_user }}/.ssh/authorized_keys"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: '0600'
        remote_src: yes
      when: ansible_env.USER == 'root'
      ignore_errors: yes
    
    - name: Allow deploy user to sudo without password (temporary)
      lineinfile:
        path: /etc/sudoers.d/{{ deploy_user }}
        line: "{{ deploy_user }} ALL=(ALL) NOPASSWD:ALL"
        create: yes
        mode: '0440'
        validate: 'visudo -cf %s'
    
    # ============================================
    # SSH Security Hardening
    # ============================================
    
    - name: Backup original sshd_config
      copy:
        src: /etc/ssh/sshd_config
        dest: /etc/ssh/sshd_config.backup
        remote_src: yes
        force: no
    
    - name: Configure SSH - Change port
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?Port'
        line: "Port {{ ssh_port }}"
        state: present
      notify: restart sshd
    
    - name: Configure SSH - Disable root login
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin no'
        state: present
      notify: restart sshd
    
    - name: Configure SSH - Disable password authentication
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PasswordAuthentication'
        line: 'PasswordAuthentication no'
        state: present
      notify: restart sshd
    
    - name: Configure SSH - Enable public key authentication
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PubkeyAuthentication'
        line: 'PubkeyAuthentication yes'
        state: present
      notify: restart sshd
    
    - name: Configure SSH - Disable empty passwords
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PermitEmptyPasswords'
        line: 'PermitEmptyPasswords no'
        state: present
      notify: restart sshd
    
    - name: Configure SSH - Disable X11 forwarding
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?X11Forwarding'
        line: 'X11Forwarding no'
        state: present
      notify: restart sshd
    
    - name: Configure SSH - Set max auth tries
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?MaxAuthTries'
        line: 'MaxAuthTries 3'
        state: present
      notify: restart sshd
    
    - name: Configure SSH - Enable strict modes
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?StrictModes'
        line: 'StrictModes yes'
        state: present
      notify: restart sshd
    
    - name: Configure SSH - Set login grace time
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?LoginGraceTime'
        line: 'LoginGraceTime 60'
        state: present
      notify: restart sshd
    
    - name: Configure SSH - Set max sessions
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?MaxSessions'
        line: 'MaxSessions 2'
        state: present
      notify: restart sshd
    
    - name: Configure SSH - Allow specific users only
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?AllowUsers'
        line: "AllowUsers {{ allowed_ssh_users | join(' ') }}"
        state: present
      notify: restart sshd
    
    - name: Validate SSH configuration
      command: sshd -t
      changed_when: false
    
    # ============================================
    # Firewall Configuration (UFW)
    # ============================================
    
    - name: Install UFW
      apt:
        name: ufw
        state: present
    
    - name: UFW - Set default incoming policy to deny
      ufw:
        direction: incoming
        policy: deny
    
    - name: UFW - Set default outgoing policy to allow
      ufw:
        direction: outgoing
        policy: allow
    
    - name: UFW - Allow new SSH port
      ufw:
        rule: allow
        port: "{{ ssh_port }}"
        proto: tcp
        comment: 'SSH on custom port'
    
    - name: UFW - Allow HTTP
      ufw:
        rule: allow
        port: '80'
        proto: tcp
        comment: 'HTTP'
    
    - name: UFW - Allow HTTPS
      ufw:
        rule: allow
        port: '443'
        proto: tcp
        comment: 'HTTPS'
    
    - name: UFW - Enable firewall
      ufw:
        state: enabled
    
    - name: UFW - Set logging to low
      ufw:
        logging: 'low'
    
    # ============================================
    # Fail2Ban Configuration
    # ============================================
    
    - name: Install fail2ban
      apt:
        name: fail2ban
        state: present
    
    - name: Copy fail2ban jail.conf to jail.local
      copy:
        src: /etc/fail2ban/jail.conf
        dest: /etc/fail2ban/jail.local
        remote_src: yes
        force: no
    
    - name: Configure fail2ban defaults
      blockinfile:
        path: /etc/fail2ban/jail.local
        insertafter: '\[DEFAULT\]'
        marker: "# {mark} ANSIBLE MANAGED BLOCK - DEFAULT"
        block: |
          bantime = 10m
          findtime = 10m
          maxretry = 5
    
    - name: Configure fail2ban SSH jail
      blockinfile:
        path: /etc/fail2ban/jail.local
        insertafter: '\[sshd\]'
        marker: "# {mark} ANSIBLE MANAGED BLOCK - SSHD"
        block: |
          enabled = true
          port = {{ ssh_port }}
          logpath = /var/log/auth.log
          maxretry = 3
          bantime = 1h
    
    - name: Start and enable fail2ban
      systemd:
        name: fail2ban
        state: started
        enabled: yes
    
    # ============================================
    # Automatic Security Updates
    # ============================================
    
    - name: Install unattended-upgrades
      apt:
        name: unattended-upgrades
        state: present
    
    - name: Configure unattended-upgrades
      copy:
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
        content: |
          Unattended-Upgrade::Allowed-Origins {
              "${distro_id}:${distro_codename}-security";
              "${distro_id}ESMApps:${distro_codename}-apps-security";
              "${distro_id}ESM:${distro_codename}-infra-security";
          };
          Unattended-Upgrade::AutoFixInterruptedDpkg "true";
          Unattended-Upgrade::MinimalSteps "true";
          Unattended-Upgrade::Remove-Unused-Kernel-Packages "true";
          Unattended-Upgrade::Remove-Unused-Dependencies "true";
          Unattended-Upgrade::Automatic-Reboot "false";
        mode: '0644'
    
    - name: Enable automatic updates
      copy:
        dest: /etc/apt/apt.conf.d/20auto-upgrades
        content: |
          APT::Periodic::Update-Package-Lists "1";
          APT::Periodic::Unattended-Upgrade "1";
          APT::Periodic::AutocleanInterval "7";
        mode: '0644'
    
    # ============================================
    # System Security Hardening
    # ============================================
    
    - name: Configure sysctl for security
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        sysctl_file: /etc/sysctl.d/99-security.conf
        reload: yes
      loop:
        - { name: 'net.ipv4.ip_forward', value: '0' }
        - { name: 'net.ipv4.conf.all.accept_redirects', value: '0' }
        - { name: 'net.ipv6.conf.all.accept_redirects', value: '0' }
        - { name: 'net.ipv4.conf.all.accept_source_route', value: '0' }
        - { name: 'net.ipv6.conf.all.accept_source_route', value: '0' }
        - { name: 'net.ipv4.conf.all.log_martians', value: '1' }
        - { name: 'net.ipv4.tcp_syncookies', value: '1' }
        - { name: 'net.ipv4.icmp_echo_ignore_broadcasts', value: '1' }
        - { name: 'net.ipv4.conf.all.rp_filter', value: '1' }
    
    - name: Install security tools
      apt:
        name:
          - logwatch
          - aide
          - rkhunter
          - lynis
        state: present
    
    - name: Set proper permissions on sensitive files
      file:
        path: "{{ item }}"
        mode: '0600'
      loop:
        - /etc/ssh/sshd_config
        - /etc/shadow
        - /etc/gshadow
    
    # ============================================
    # Logging and Monitoring
    # ============================================
    
    - name: Ensure auditd is installed
      apt:
        name: auditd
        state: present
    
    - name: Start and enable auditd
      systemd:
        name: auditd
        state: started
        enabled: yes
    
    - name: Configure log rotation for auth.log
      copy:
        dest: /etc/logrotate.d/auth
        content: |
          /var/log/auth.log {
              rotate 12
              monthly
              compress
              delaycompress
              notifempty
              create 0640 root adm
          }
        mode: '0644'
    
    # ============================================
    # Final Security Report
    # ============================================
    
    - name: Display security summary
      debug:
        msg:
          - "============================================"
          - "Security Hardening Complete!"
          - "============================================"
          - "Deploy User: {{ deploy_user }}"
          - "SSH Port: {{ ssh_port }}"
          - "Root Login: Disabled"
          - "Password Auth: Disabled"
          - "UFW Firewall: Enabled"
          - "Fail2ban: Enabled"
          - "Auto Updates: Enabled"
          - "============================================"
          - "IMPORTANT: Test SSH connection before logging out!"
          - "Command: ssh -p {{ ssh_port }} {{ deploy_user }}@YOUR_SERVER_IP"
          - "============================================"
  
  handlers:
    - name: restart sshd
      systemd:
        name: sshd
        state: restarted
